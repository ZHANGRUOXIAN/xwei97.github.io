#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Oct 22 21:55:28 2020

@author: xinwei
"""

def get_fasta(fasta_path):
    fasta = {}
    print("\nGetting DNA sequence...")
    with open(fasta_path, 'r') as file:
	    for line in file:
	        if line.startswith(">"):
	            name = line.rstrip()
	            fasta[name] = ''
	            continue
	        fasta[name] += line.rstrip()
    print("There are %d sequences." % len(fasta))
    return(fasta)

def COMPLEMENT(fasta = {}, fasta_path = '', reverse = False, width = 60, outpath = ''):
    if fasta == {}: fasta = get_fasta(fasta_path)
    complement = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'}
    heads = list(fasta.keys())
    seqs = list(fasta.values())
    seqs_num = len(fasta)
    # default output path
    filename = fasta_path.split("/")[-1]
    if outpath == '': outpath = fasta_path.replace(filename, filename.split(".")[0] + "_complementary.fasta")
    outfile = open(outpath, "w")
    print("\nGetting complementary strand...")
    for i in range(seqs_num):
        print(heads[i])
        seq = seqs[i]
        if reverse: seq = seq[::-1]
        c_seq = ''.join(complement.get(base, base) for base in seq)        
        outfile.write(heads[i]+"\n")
        start=0; end=start+width
        while end < len(c_seq):
            outfile.write(str(c_seq[start:end])+"\n")
            start+=width;end+=width
        while end >= len(c_seq):
            outfile.write(str(c_seq[start:])+"\n")
            break
    outfile.close()
    print("OK :)")
    print("The FASTA file of the complementary sequence has been saved in '%s'." % outpath)

import argparse
parser = argparse.ArgumentParser(description='Get DNA complementary strand.')
parser.add_argument('--path', '-p', help='path of your fasta file', required=True)
parser.add_argument('--reverse', '-r', help='whether to reverse complement (default False)', default=False)
parser.add_argument('--width', '-w', type=int, help='the number of bases per line output to FASTA (default 60)', default=60)
parser.add_argument('--outpath', '-o', help='specify the output file (default is to FASTA directory)', default='')
args = parser.parse_args()

if __name__ == '__main__':
    try:
        COMPLEMENT(fasta = {}, fasta_path = args.path, reverse = args.reverse, width = args.width, outpath=args.outpath)
    except Exception as e:
        print(e)